// Problema de Stokes estacionario 2D:
//
// - nu*( dxx(u) + dyy(u) ) + dx(p) = 0
// - nu*( dxx(v) + dyy(v) ) + dy(p) = 0
//   dx(u) + dy(v) = 0
//   + condiciones_de_contorno
//
// donde dx=derivada parcial respecto a x, dxx = derivada segunda respecto a x, etc.
//
// La variable nu es la viscosidad cinemática (nu=mu/rho, donde mu es
// la viscosidad dinámica y rho es la densidad).
//
// La variable p es resultande del cambio de variables: p = (p'-pInf)/rho, donde
// pInf es la presión de referencia. Por tanto, la presión resultante, p, hay que
// redefinirla como p*rho+pInf
//
// Dominio geométrico y condiciones de contorno:
//
// * Dominio rectangular con un agujero circular
// * Cálculo de la vorticidad y almacenamiento en un fichero VTK
//   (para su posterior visualización con VTK)
// * Condiciones de contorno: u=v=0 en la circunferencia, v=0 en toda la frontera,
//   u es un valor dado en la pared izquierda, grad(u)*n=0 en el resto de las
//   paredes.

// Datos físicos
real rho=998.2; // Densidad del agua (en kg/m^3) a 20 grados C.
real mu=1.102e-3; // Viscosidad dinámica del agua (en N*s/m^2) a 20 grados C.
real nu=mu/rho; // Viscodidad cinemática del agua (en m^2/s)
real pInf=0; // Presión de referencia

// Parámetros del sistema
real inVelocity=1; // Velocidad de entrada del fluido (por ejemplo, m/s)
real L=1; // Longitud característica (por ejemplo, en metros).
real V=inVelocity; // Velocidad característica
real Re=V*L/nu; // Número de Reynodlds

cout << "=======================================================================" << endl;
cout << "Ejecutando experimento con:  Re=" << Re
     << "  (V=" << V << ", L=" << L << ", nu=" << nu << ")" << endl;
cout << "=======================================================================" << endl;

// Coordenadas para definir el rectángulo exterior
real xcoor = 15*L, ycoor = 5*L;

// Etiquetas para definir las fronteras del dominio
int paredInf=1, paredSup=3, paredDer=2, paredIzq=4;
int[int] paredes = [paredInf, paredSup, paredDer, paredIzq];
int cilindro=0;

// Definición de las paredes
border lx1(k=-xcoor,xcoor) { x=k; y=-ycoor; label=paredInf; }
border lx2(k=-xcoor,xcoor) { x=k; y=+ycoor; label=paredSup; }
border ly1(k=-ycoor,ycoor) { x=-xcoor; y=k; label=paredIzq; }
border ly2(k=-ycoor,ycoor) { x=+xcoor; y=k; label=paredDer; }

// Definición del círculo
real R=1.5*L;
border c(k=0,2*pi) { x=R*cos(k); y=R*sin(k); label=cilindro; }

// Construcción de la malla
int nx=40, ny=12, nc=25;
mesh Th = buildmesh( ly1(-ny)+lx1(nx)+ly2(ny)+lx2(-nx) + c(-nc) );

// Defnición de espacios y funciones de elementos finitos
fespace Vh(Th,P2); // Espacio para velocidades
fespace Qh(Th,P1); // Espacio para presiones
Vh u,v,uu,vv; // Incógnitas u,v y funciones test uu,vv
Qh p,pp; // Presión y función test,

fespace VortSpace(Th,P1); // Espacio donde calcular la vorticidad
VortSpace vort; // Variable para calcular la vorticidad

macro grad(u) [dx(u), dy(u)] // fin de macro
macro div(u,v) (dx(u)+dy(v)) // fin de macro

problem stokes2d( [u,v,p], [uu,vv,pp]
		  // , solver=LU // Ejemplo de selección de "solver"
		  ) =
  int2d(Th)(
	    nu*grad(u)'*grad(uu) + nu*grad(v)'*grad(vv)
	    - p*div(uu,vv) + pp*div(u,v)
	    + 1e-12 * p*pp // Penalización de la presión ( => unicidad de solución)
	    )
  + on(paredes, v=0)  // Velocidad vertical nula en la frontera de tipo "pared"
  + on(paredIzq,u=inVelocity) // V. horizontal dada en pared izquierda
  + on(cilindro, u=0, v=0);  // En la frontera del cilindro

stokes2d; // Resolución del problema de Stokes

//p=p*rho; // Re-escalo la presión (en las ecuaciones, se dividió por rho)
//p=p+pInf; // ... y sumo presión de referencia

// cout << "Valor min/max para p: " << p[].min  << "/"
     // << p[].max << endl;

// Fuerza de arrastre (apuntes P. López, D. Buque, 2017):
//   F_i = \int_{superficie} \sigma_{ij}  d A_j,
// donde \sigma_{ij} es el tensor de esfuerzos:
//   \sigma_{ij} = -p \delta_{ij} + \tau_{ij}.
// Fluido Newtoniano si y sólo si
//   \tau_{ij} = 2\mu e_{ij},
// donde e_{ij} = velocidad de deformación:
//   e_{ij} = 1./2 ( \partial u_i / \partial x_j + \partial u_j / \partial x_i ).
// Luego
//   \sigma_{ij} = -p \delta_{ij}
//           + \mu ( \partial u_i / \partial x_j + \partial u_j / \partial x_i ).

// Fuerza debida a la presión
real fP = -int1d(Th, cilindro)(p);
// Fuerzas debidas al tensor de esfuerzos (dos componentes)
real fTau1 = mu*int1d(Th, cilindro)(2*dx(u)*N.x + (dy(u)+dx(v))*N.y);
real fTau2 = mu*int1d(Th, cilindro)((dy(u)+dx(v))*N.x + 2*dy(v)*N.y);

cout << "Fuerza debida a la presi'on (m'odulo):" << abs(fP) << endl;
cout << "Fuerza debida a esfuerzos (m'odulo):" << sqrt(fTau1^2+fTau2^2) << endl;
// cout << "Arrastre:" << arrastre << endl;
cout << "Previsto:" << 3*pi*mu*V*2*R << endl;

// Vorticity
vort = dy(u) - dx(v);

plot(Th, [u,v], value=1, wait=1);
plot(Th, p, fill=1, value=1, wait=1, cmm="Pressure");
plot(Th, vort, fill=1, value=1, wait=1, cmm="Vorticity");

// Save to VTK (for high quality plotting)
load "iovtk";
int[int] fforder=[1,1,1,1]; // Orden polinómico de las variables
savevtk("stokes-drag-cylinder.vtk", Th, [u,v,0], p, vort, order=fforder,
	dataname="Velocity Pressure Vorticity");
